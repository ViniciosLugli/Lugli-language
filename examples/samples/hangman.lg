struct Hangman {
	word
	founded = []

	fn new(word) {
		return Hangman { word: word }
	}

	fn __setup__(this) {
		for i in this.word.len?() {
			this.founded.push!("_")
		}
	}

	fn check_win(this) {
		create buf = ""

		for letter in this.founded {
			Console.println!(letter)
			buf = buf.append!(letter)
		}

		if buf == this.word  {
			return true
		}

		return false
	}

	fn check_letter(this, letter){
		create mask = []
		create flag = false

		for i in this.word {
			if i == letter {
				mask.push!(i)
				flag = true
			} else {
				mask.push!("_")
			}

		}

		for i in this.founded.len?() {
			if this.founded[i] == "_" {
				this.founded[i] = mask[i]
			}
		}

		Console.println!(this.founded)
		return true
	}

	fn list_founded_letters(this) {
		return this.founded
	}
}

create hangman = Hangman.new("lugli")
hangman.__setup__()

loop {
	Console.println!("Enter a letter: ")
	create letter = Console.input!()

	if hangman.check_letter(letter) {
		Console.println!("Letter founded!")
	} else {
		Console.println!("Letter not founded!")
	}

	Console.println!("Founded letters: [" + hangman.list_founded_letters().join!(", ") + "]")

	if hangman.check_win() {
		Console.println!("You win!")
		break
	}
}